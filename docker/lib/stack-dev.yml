version: '3.4'

services:
  traefik:
    image: traefik
    command:
      - "--api"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"
      - "--accessLog"
      - "--log.level=INFO"
      - "--providers.docker.network=lib_backends"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backends
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
      - target: 8080
        published: 8888
        mode: host
    deploy:
      labels:
        traefik.http.routers.dashboard.rule: "PathPrefix(`/dashboard`)"
        traefik.http.routers.dashboard.service: "api@internal"
      mode: global
      placement:
        constraints:
          - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

# vue:
  #   image: fabrizio2210/coverletter-frontend-dev
  #   labels: 
  #       traefik.port: 80
  #       traefik.enable: "true"
  #       traefik.frontend.rule: "PathPrefix(`/`)"
  #       traefik.http.services.frontend-service.loadbalancer.server.port: 80
  #       traefik.http.routers.frontend.rule: "PathPrefix(`/`)"
  #   volumes:
  #     - ../../src/vue/src:/opt/web/src
  #   networks: 
  #     - backends

  # redis_cover_letter:
  #   image: redis_cover_letter
  #   networks:
  #     - backends


  telegram-bot:
    image: fabrizio2210/coverletter-telegram-bot-dev
    restart: always
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      MONGO_HOST: "mongodb://root:develop@mongo:27017/"
      DB_NAME: "cover_letter"
      TELEGRAM_ALLOWED_USERS: ${TELEGRAM_ALLOWED_USERS}
    volumes:
      - ../../:/app
    networks:
      - backends

  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: develop
    networks:
      - backends

  mongo-express:
    image: mongo-express
    restart: always
    labels: 
      traefik.port: 80
      traefik.enable: "true"
      traefik.mongoexpress.rule: "Host(`mongo-express`)  && PathPrefix(`/`)"
      traefik.http.services.mongoexpress-service.loadbalancer.server.port: 8081
      traefik.http.routers.mongoexpress.rule: "Host(`mongo-express`) && PathPrefix(`/`)"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: develop
      ME_CONFIG_MONGODB_URL: mongodb://root:develop@mongo:27017/
    networks:
      - backends

  # authentication:
  #   image: fabrizio2210/coverletter-authentication-dev
  #   environment:
  #     REDIS_HOST: redis_cover_letter
  #     DB_URL: mongodb://root:develop@mongo:27017/
  #     DB_NAME: coverletter
  #   volumes:
  #     - ../../src/go:/usr/src/app
  #   networks:
  #     - backends

  # api:
  #   image: fabrizio2210/coverletter-api-dev
  #   labels:
  #     traefik.port: 80
  #     traefik.enable: "true"
  #     traefik.api.rule: "PathPrefix(`/api`)"
  #     traefik.http.services.api-service.loadbalancer.server.port: 5000
  #     traefik.http.routers.api.rule: "PathPrefix(`/api`)"
  #   environment:
  #     REDIS_HOST: redis_cover_letter
  #     DB_URL: mongodb://root:develop@mongo:27017/
  #     DB_NAME: coverletter
  #     STATIC_FILES_PATH: /static_files
  #     GUEST_API_URL: https://have.been.to.it/api/guest
  #   volumes:
  #     - ../../src/go/:/usr/src/app
  #     - static_files:/static_files
  #   networks:
  #     - backends
  # sse:
  #   image: fabrizio2210/coverletter-sse-dev
  #   labels: 
  #       traefik.port: 80
  #       traefik.enable: "true"
  #       traefik.sse.rule: "PathPrefix(`/api/notifications`)"
  #       traefik.http.services.sse-service.loadbalancer.server.port: 3000
  #       traefik.http.routers.sse.rule: "PathPrefix(`/api/notifications`)"
  #   environment:
  #     REDIS_HOST: redis_cover_letter
  #   volumes:
  #     - ../../src/go:/usr/src/app
  #   networks:
  #     - backends

volumes:
  static_files:

networks:
  backends:
    driver: overlay
    attachable: true
